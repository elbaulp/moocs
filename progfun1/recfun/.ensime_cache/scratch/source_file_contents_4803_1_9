package recfun

object Main {
  def main(args: Array[String]) {
    println("Pascal's Triangle")
    for (row <- 0 to 10) {
      for (col <- 0 to row)
        print(pascal(col, row) + " ")
      println()
    }
    print(balance(":-())(".toList))
  }

  /**
   * Exercise 1
   */
  def pascal(c: Int, r: Int): Int =
    if (c == r || c == 0) 1
    else pascal(c, r - 1) + pascal(c - 1, r - 1)


  /**
   * Exercise 2
   */
  def balance(chars: List[Char]): Boolean =  {
    def check(acc: Int, c: List[Char], keepGoing: Boolean): Int = {
      if (keepGoing){
        val count = c.head match {
          case head == '(' => acc + 1
          case head == ')' => acc - 1
          case  else if (acc < 0) check(acc, Nil, false)
            else acc
          case _ => acc
        }
      } else acc
    }
    check(0, chars, true) == 0
  }

  /**
   * Exercise 3
   */
  def countChange(money: Int, coins: List[Int]): Int = ???
}
